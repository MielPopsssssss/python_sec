import socket
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

listen_address = '127.0.0.1'
listen_port = 8888
destination_address = 'example.com'
destination_port = 80
shared_key = b'SharedSecretKey'
public_key = b'PublicKey'

def encrypt(data, key):
    cipher = Cipher(algorithms.AES(key), modes.CFB(b'\0' * 16), backend=default_backend())
    encryptor = cipher.encryptor()
    return encryptor.update(data) + encryptor.finalize()

def decrypt(data, key):
    cipher = Cipher(algorithms.AES(key), modes.CFB(b'\0' * 16), backend=default_backend())
    decryptor = cipher.decryptor()
    return decryptor.update(data) + decryptor.finalize()

def handle_client(client_socket):
    destination_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    destination_socket.connect((destination_address, destination_port))

    client_socket.send(f"{destination_address}:{destination_port}".encode())

    while True:
        client_data = client_socket.recv(4096)
        if not client_data:
            break

        encrypted_data = encrypt(client_data, shared_key)
        destination_socket.sendall(encrypted_data)

        destination_data = destination_socket.recv(4096)
        encrypted_data = encrypt(destination_data, shared_key)
        client_socket.sendall(encrypted_data)

    client_socket.close()
    destination_socket.close()

def start_proxy():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind((listen_address, listen_port))
    server.listen(5)

    print(f"[*] Listening on {listen_address}:{listen_port}")

    while True:
        client_socket, addr = server.accept()
        print(f"[*] Accepted connection from {addr[0]}:{addr[1]}")

        client_handler = threading.Thread(target=handle_client, args=(client_socket,))
        client_handler.start()

if __name__ == "__main__":
    start_proxy()
