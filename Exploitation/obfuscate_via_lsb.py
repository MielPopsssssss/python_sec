from PIL import Image

image_path = "votre_image.png"
image = Image.open(image_path)
W, H = image.size

max_code_size = (W * H) // 8
code_file_path = "votre_code.py"
with open(code_file_path, 'r') as code_file:
    code = code_file.read()
if len(code) > max_code_size:
    raise ValueError("La taille du code est supérieure à la taille maximale permise.")
encoded_data = code.encode('utf-8')
encoded_data += b'\0' * (max_code_size - len(encoded_data))
binary_data = ''.join(format(byte, '08b') for byte in encoded_data)
pixels = list(image.getdata())
encoded_pixels = [(pixel[0] & 0b11111110) | int(bit) for pixel, bit in zip(pixels, binary_data)]
encoded_image = Image.new('RGB', (W, H))
encoded_image.putdata([(r, g, b) for r, g, b in zip(encoded_pixels[::3], encoded_pixels[1::3], encoded_pixels[2::3])])
encoded_image.save("image_encodee.png")

# BONUS: 
decoded_pixels = [pixel & 1 for pixel in encoded_pixels]
decoded_binary_data = ''.join(str(bit) for bit in decoded_pixels)
decoded_data = bytes(int(decoded_binary_data[i:i + 8], 2) for i in range(0, len(decoded_binary_data), 8))

decoded_code_file_path = "code_decode.py"
with open(decoded_code_file_path, 'w') as decoded_code_file:
    decoded_code_file.write(decoded_data.decode('utf-8'))

# usage : python obfuscate_via_lsb.py
# l'image image_encodee.png contient le code source du fichier code_decode.py
# le fichier code_decode.py contient le code source du fichier code.py
